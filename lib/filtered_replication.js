// Generated by CoffeeScript 1.10.0
(function() {
  var log, request;

  request = require('request-json-light');

  log = require('printit')({
    prefix: 'filteredReplication'
  });

  module.exports = {
    getFilterName: function(deviceName) {
      log.debug("getFilterName " + deviceName);
      return "filter-" + deviceName + "-config";
    },
    getDesignDocId: function(deviceName) {
      log.debug("getDesignDocId " + deviceName);
      return "_design/" + (this.getFilterName(deviceName));
    },
    getFilteredFunction: function(config) {
      var filters;
      log.debug("getFilteredFunction");
      if (config == null) {
        throw new Error('No config');
      }
      filters = [];
      if (config.contact != null) {
        filters.push("doc.docType.toLowerCase() === 'contact'");
      }
      if (config.calendar != null) {
        filters.push("doc.docType.toLowerCase() === 'event'");
        filters.push("doc.docType.toLowerCase() === 'tag'");
      }
      if (config.file != null) {
        filters.push("doc.docType.toLowerCase() === 'file'");
        filters.push("doc.docType.toLowerCase() === 'folder'");
      }
      if (config.notification != null) {
        filters.push("(doc.docType.toLowerCase() === 'notification'\n    && doc.type === 'temporary')");
      }
      return "function (doc) { return doc.docType && (" + (filters.join(' || ')) + "); }";
    },
    generateDesignDoc: function(deviceName, config) {
      var obj;
      log.debug("generateDesignDoc " + deviceName);
      return {
        _id: this.getDesignDocId(deviceName),
        views: {},
        filters: (
          obj = {},
          obj["" + (this.getFilterName(deviceName))] = this.getFilteredFunction(config),
          obj
        )
      };
    },
    setDesignDoc: function(cozyUrl, deviceName, devicePassword, config, callback) {
      var client, doc;
      log.debug("setDesignDoc " + cozyUrl + ", " + deviceName);
      if (!(config.file || config.contact || config.calendar || config.notification)) {
        return callback(new Error("What do you want to synchronize?"));
      }
      doc = this.generateDesignDoc(deviceName, config);
      client = request.newClient(cozyUrl);
      client.setBasicAuth(deviceName, devicePassword);
      return client.put("/ds-api/filters/config", doc, function(err, res, body) {
        var message, ref;
        if (err) {
          return callback(err);
        } else if ((ref = !(res != null ? res.statusCode : void 0)) === 200 || ref === 201) {
          message = body.error || ("invalid statusCode " + (res != null ? res.statusCode : void 0));
          return callback(new Error(message));
        } else {
          return callback(null, body);
        }
      });
    },
    getDesignDoc: function(cozyUrl, deviceName, devicePassword, callback) {
      var client;
      log.debug("getDesignDoc " + cozyUrl + ", " + deviceName);
      client = request.newClient(cozyUrl);
      client.setBasicAuth(deviceName, devicePassword);
      return client.get("/ds-api/filters/config", function(err, res, body) {
        var message;
        if (err) {
          return callback(err);
        } else if ((res != null ? res.statusCode : void 0) !== 200) {
          message = body.error || ("invalid statusCode " + (res != null ? res.statusCode : void 0));
          return callback(new Error(message));
        } else {
          return callback(null, body);
        }
      });
    },
    removeDesignDoc: function(cozyUrl, deviceName, devicePassword, callback) {
      var client;
      log.debug("removeDesignDoc " + cozyUrl + ", " + deviceName);
      client = request.newClient(cozyUrl);
      client.setBasicAuth(deviceName, devicePassword);
      return client.del("/ds-api/filters/config", function(err, res, body) {
        var message, ref;
        if (err) {
          return callback(err);
        } else if ((ref = !(res != null ? res.statusCode : void 0)) === 200 || ref === 204) {
          message = body.error || ("invalid statusCode " + (res != null ? res.statusCode : void 0));
          return callback(new Error(message));
        } else {
          return callback(null, body);
        }
      });
    }
  };

}).call(this);
