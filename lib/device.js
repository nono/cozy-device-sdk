// Generated by CoffeeScript 1.10.0
(function() {
  var Device, log, request;

  request = require('request-json-light');

  log = require('printit')({
    prefix: 'device'
  });

  module.exports = Device = {
    pingCozy: function(cozyUrl, callback) {
      var client;
      log.debug("pingCozy " + cozyUrl);
      client = request.newClient(cozyUrl);
      return client.get("status", function(err, res, body) {
        if ((res != null ? res.statusCode : void 0) !== 200) {
          return callback(new Error("No cozy at this URL"));
        } else {
          return callback();
        }
      });
    },
    checkCredentials: function(cozyUrl, cozyPassword, callback) {
      var client, data;
      log.debug("checkCredentials " + cozyUrl);
      client = request.newClient(cozyUrl);
      data = {
        login: 'owner',
        password: cozyPassword
      };
      return client.post("login", data, function(err, res, body) {
        if ((res != null ? res.statusCode : void 0) !== 200) {
          err = (err != null ? err.message : void 0) || body.error || body.message;
        }
        return callback(err);
      });
    },
    registerDevice: function(cozyUrl, deviceName, cozyPassword, perms, callback) {
      var client, device;
      log.debug("registerDevice " + cozyUrl + ", " + deviceName);
      client = request.newClient(cozyUrl);
      client.setBasicAuth('owner', cozyPassword);
      device = {
        login: deviceName
      };
      if (callback != null) {
        device.permissions = perms;
      } else {
        callback = perms;
      }
      return client.post('device/', device, function(err, res, body) {
        if (err) {
          return callback(err);
        } else if (body.error != null) {
          return callback(body.error);
        } else {
          return callback(null, {
            id: body.id,
            deviceName: deviceName,
            password: body.password
          });
        }
      });
    },
    registerDeviceSafe: function(cozyUrl, deviceName, cozyPassword, perms, callback) {
      var originalName, ref, registerDevice, tries, tryRegister;
      log.debug("registerDeviceSafe " + cozyUrl + ", " + deviceName);
      tries = 1;
      originalName = deviceName;
      registerDevice = Device.registerDevice;
      if (callback == null) {
        ref = [null, perms], perms = ref[0], callback = ref[1];
      }
      tryRegister = function(name) {
        return registerDevice(cozyUrl, name, cozyPassword, perms, function(err, res) {
          if (err === 'This name is already used') {
            tries++;
            return tryRegister(originalName + "-" + tries);
          } else {
            return callback(err, res);
          }
        });
      };
      return tryRegister(deviceName);
    },
    unregisterDevice: function(cozyUrl, deviceName, devicePassword, callback) {
      var client;
      log.debug("unregisterDevice " + cozyUrl + ", " + deviceName);
      client = request.newClient(cozyUrl);
      client.setBasicAuth(deviceName, devicePassword);
      return client.del("device/" + deviceName + "/", function(err, res, body) {
        var ref;
        if ((ref = res.statusCode) === 200 || ref === 204) {
          return callback(null);
        } else if (err) {
          return callback(err);
        } else if (body.error != null) {
          return callback(new Error(body.error));
        } else {
          return callback(new Error("Something went wrong (" + res.statusCode + ")"));
        }
      });
    },
    sendMailFromUser: function(cozyUrl, deviceName, devicePassword, mail, callback) {
      var client;
      log.debug("sendMailFromUser " + mail.to + ", " + mail.subject);
      client = request.newClient(cozyUrl);
      client.setBasicAuth(deviceName, devicePassword);
      return client.post("ds-api/mail/from-user", mail, function(err, res, body) {
        if (res.statusCode === 200) {
          return callback(null);
        } else if (err) {
          return callback(err);
        } else if (body.error != null) {
          return callback(new Error(body.error));
        } else {
          return callback(new Error("Something went wrong (" + res.statusCode + ")"));
        }
      });
    },
    sendMailToUser: function(cozyUrl, deviceName, devicePassword, mail, callback) {
      var client;
      log.debug("sendMailToUser " + mail.from + ", " + mail.subject);
      client = request.newClient(cozyUrl);
      client.setBasicAuth(deviceName, devicePassword);
      return client.post("ds-api/mail/to-user", mail, function(err, res, body) {
        if (res.statusCode === 200) {
          return callback(null);
        } else if (err) {
          return callback(err);
        } else if (body.error != null) {
          return callback(new Error(body.error));
        } else {
          return callback(new Error("Something went wrong (" + res.statusCode + ")"));
        }
      });
    },
    getDiskSpace: function(cozyUrl, login, password, callback) {
      var client;
      log.debug("getDiskSpace " + cozyUrl + ", " + login);
      client = request.newClient(cozyUrl);
      client.setBasicAuth(login, password);
      return client.get("disk-space", function(err, res, body) {
        if (err) {
          return callback(err);
        } else if (body.error) {
          return callback(new Error(body.error));
        } else {
          return callback(null, body);
        }
      });
    }
  };

}).call(this);
